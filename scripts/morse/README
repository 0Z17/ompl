
Works with MORSE version 1.0_STABLE. This version has a slight interface change. If you
would like to continue using the old interface version, check lines 35 and 61 in ompl_addon.py.

Files in this directory:
    README
        This.
    communicator.py
        Meant to be run with the Blender game engine during planning. Responsible
        for starting up the planning program and communicating with it. It needs to
        be attached to the scene in a special way, but that's taken care of by builder.py.
    planner.py
        External script called by communicator.py when the game engine starts. It
        can make procedure calls into blender to get/set data through a socket.
        It sets up OMPL for planning, though it's not complete yet.
    builder.py
        MORSE builder script invoked when MORSE is started. Loads up the planning
        environment and sets up the game engine logic for communication with the planner.
    bgetest.blend
        Where I'm doing my testing.
    ompl_addon.py
        Addon script to be installed into Blender. Sets up some information in MORSE's
        configuration file, ~/.morse/config, and provides a menu with a "Plan..." button.
        See install_addon to install it.
    install_addon
        Bash script that puts ompl_addon.py into Blender's addons directory. Then
        go to File > User Preferences... > Addons > Game Engine, and check the box
        beside "OMPL Interface" to enable it. Then press "Save As Default" to keep
        it enabled whenever you start Blender. Notice the fancy new OMPL submenu
        inside the Game menu.

You need to edit:
    line 8 in communicator.py
    line 13 in ompl_addon.py
    line 10 in builder.py
so that they point to your ompl_morse directory.

It works if you run 'blender bgetest.blend' and
    1) You can find the OMPL submenu, and pressing "Plan..." successfully launches MORSE.
    2) In MORSE the cube falls onto the car.
    3) OMPL complains about the lack of goal and stops planning.




