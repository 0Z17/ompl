INSTALLATION: (Notice: I also changed my speed hack interface for Blender; this code won't run
    without my updated version, which I will commit soon)
-Install MORSE and it's dependencies (preferably version 1.0_STABLE)
-(optional) Run 'morse check' to verify the installation
-Build and install OMPL and the Python bindings (see README.md in toplevel directory)
  with Python3 and the Python3 version of Boost.Python using CMake variables PYTHON_EXEC,
  PYTHON_INCLUDE_DIRS, PYTHON_LIBRARIES, and Boost_PYTHON_LIBRARY (e.g. libboost_python-py32.so
  instead of libboost_python.so)
-Edit:
    line 8 in communicator.py
    line 13 in ompl_addon.py
    line 10 in builder.py
  so that they point to your ompl_morse directory (eventually this won't be necessary).
-Install ompl_addon.py into Blender:
  Open Blender, go to File > User Preferences > Addons > Install from File..., navigate to
  ompl_addon.py, press Install from File..., check the box for OMPL Interface, then press
  Save User Settings and exit the User Preferences dialog.

NOTE: This build works with MORSE 1.0_STABLE, but the latest branch of MORSE has a slightly
different command line interface. If you would like to use the latest MORSE version, check lines
47 and 387 in ompl_addon.py.


Files in this directory:
    communicator.py
        Run with the Blender game engine during planning. Responsible for starting up
        the planning program and communicating with it. It is attached to the scene
        by builder.py.
    planner.py
        External script called by communicator.py when the game engine starts. It
        can make procedure calls into blender to get/set data through a socket.
        It attempts to solve the planning problem and save the path to a file chosen
        by the user.
    player.py
        Like planner.py, but reads a control path from a file and plays it back
        instead of planning.
    environment.py
        Contains environment, goal, and projection classes for use by planner.py and
        player.py. (Formerly, these were contained in planner.py.)
    builder.py
        MORSE builder script invoked when MORSE is started. Loads up the planning
        environment and sets up the game engine logic for communication with the planner.
    bgetest.blend
        Where I'm doing my testing. There are two 'islands', with the car and a ramp on one,
        and a box that needs to be pushed on the other.
    ompl_addon.py
        Addon script to be installed into Blender. Provides a menu with a buttons to start
        planning or playing (invokes file selector dialog to choose the path file), and to
        add a MORSE robot to the scene. (Not all robots and controllers work yet.) Now there
        is also a button for bounds configuration.



