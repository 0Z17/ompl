/**
\page installation Installation

To compile OMPL the following two packages are required: 
- <a href="http://www.boost.org">Boost</a> (recommended version 1.42 or higher) and 
- <a href="http://www.cmake.org">CMake</a> (required version 2.8 or higher). 
.
For running the tests, you will also need <a href="http://code.google.com/p/googletest/">GTest</a>. For the python bindings you need to have the python libraries and header files installed. If you also want to be able to regenerate the python bindings (which would be necessary if you change the C++ API), then you need to install <a href="http://www.language-binding.net/pyplusplus/pyplusplus.html">Py++</a>. Detailed installation instructions for installing Py++ can be found \ref installPyPlusPlus "here". To (re)generate this documentation locally you will need <a href="http://www.doxygen.org">Doxygen</a>.

Below are installation instructions for <a href="#install_linuxosx">Linux, OS X</a>, and <a href="#install_windows">Windows</a>.
<br>

\note If you are using <a href="http://code.ros.org">ROS</a>, please see the <a href="http://www.ros.org/wiki/ompl">ompl package in ROS</a>.

\section install_linuxosx Installation on Linux and Mac OS X

Below are installation instructions for Ubuntu Linux and Mac OS X. Similar steps can be taken for other distributions, but package names may not be identical.

\subsection install_linux_ubuntu Ubuntu Linux

- If using Ubuntu 10.04 or earlier, the supplied Boost version is too old. You will need to add another repository. For Ubuntu 9.10 or 10.04, this can be done with the following command:
\code
sudo add-apt-repository ppa:gezakovacs/boost
\endcode
For ubuntu 9.04 or earlier, adding the repository will require a <a href="https://launchpad.net/~gezakovacs/+archive/boost">different approach</a>.

- If using Ubuntu 9.10 or earlier, the supplied version of CMake is too old. 
You can download the latest version from <a href="http://www.cmake.org/cmake/resources/software.html">here</a>.
- Install Boost, CMake
\code
sudo apt-get install libboost-all-dev cmake
\endcode
- To be able to build tests, generate documentation and generate Python bindings, the following are also needed:
\code
sudo apt-get install libgtest-dev doxygen python-dev
\endcode
- Follow the common steps \ref common_steps "below".

\subsection install_mac_os Mac OS X

- It is easiest to install the dependencies through <a href="http://www.macports.org">MacPorts</a>, a package manager for OS X, so install MacPorts first.
- Install Boost, CMake, and the Python libraries and headers. If you have MacPorts installed, type the following:
\code
sudo port selfupdate
sudo port install cmake boost +python26
\endcode
If you omit the \c +python26 part, Boost.Python will not be installed, and the Python bindings for OMPL cannot be compiled.
- Follow the common steps \ref common_steps "below".

\subsection common_steps Common steps
- Create a build directory and run cmake:
\code
cd ompl
mkdir -p build/Release
cd build/Release
cmake -DCMAKE_BUILD_TYPE=Release ../.. [-DCMAKE_INSTALL_PREFIX=/path/to/install]
\endcode
If you want a debug version of ompl, change "Release" to "Debug" above.
- If Python bindings are to be generated, type <tt>make update_bindings</tt>.
- Compile OMPL by typing \c make.
- Optionally, run the test programs by typing <tt>make test</tt>.
- Optionally, generate documentation by typing <tt>make doc</tt>.
- If you need to install the library, you can type <tt>make install</tt>. The install location is specified by <tt>CMAKE_INSTALL_PREFIX</tt>.
.

\section install_windows Installation on Windows

- Download and install <a href="http://www.cmake.org">CMake</a>.
- If you plan to use Microsoft Visual Studio, you can download Boost <a href="http://www.boostpro.com/download/">here</a>. If you want to use MinGW or Cygwin, follow the <a href="http://www.boost.org/doc/libs/1_43_0/more/getting_started/unix-variants.html">Unix installation instructions</a>.
- Optionally, download and install <a href="http://www.python.org/download/">Python</a>.
- Run CMake (either the GUI or the command line version). From the GUI it is easy to generate project files for Visual Studio or Makefiles.
- Build the "solution" ALL in Visual Studio, or run \c make if you use MinGW/Cygwin.
.

*/
