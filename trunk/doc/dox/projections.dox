/** \page projections Projections in OMPL    

    Most planning algorithms use a data structure (in addition to the
    tree/graph of motions) for guiding the exploration of the
    space. In many cases, this data structure is in the form of a
    discretization of the state space. For practical purposes,
    discretizing the state space itself is not feasible, due to its
    high dimensionality. An approach taken by many algorithms is to
    use projections from the state space to a low dimensional
    Euclidean space (R<sup>k</sup>, k usually around 2 or 3), and
    discretize that Euclidean space instead. This includes algorithms
    such as ompl::geometric::EST, ompl::geometric::SBL,
    ompl::geometric::KPIECE1.

    To support this notion of projections, OMPL includes
    ompl::base::ProjectionEvaluator. This is an abstract class whose
    main operation is ompl::base::ProjectionEvaluator::project(),
    which takes a ompl::base::State* and produces a
    ompl::base::EuclideanProjection (this is a representation of an
    array of real numbers).

    ompl::base::ProjectionEvaluator also includes utilities for
    discretizing the projected space (the low dimensional, Euclidean
    one). In particular, grids can be implicitly imposed on the
    projection space by setting cell sizes (a real value for each
    dimension of the Euclidean space), using
    ompl::base::ProjectionEvaluator::setCellDimensions(). The
    coordinates in the grid that correspond to a specific projection
    can be computed using
    ompl::base::ProjectionEvaluator::computeCoordinates().  If the
    sizes of cells for the grid have not been set,
    ompl::base::ProjectionEvaluator::setup() uses sampling to identify
    sizes such that each dimension of the projection space is split
    into roughly 10 parts. This is merely a default and the user is
    encouraged to set desired cell sizes.

    
    Projections are specific to manifolds. This means that each
    ompl::base::StateManifold has its corresponding set of
    ompl::base::ProjectionEvaluator. In the implementation of
    manifolds, it is recommended that projections are set in the
    ompl::base::StateManifold::registerProjections()
    function. Although not required, it is good practice to register
    all projections to their corresponding manifold, as this ensures
    calling ompl::base::ProjectionEvaluator::setup() when needed.
    Most manifolds have at least a default projection set by
    ompl::base::StateManifold::registerProjections(). For compound
    manifolds (ompl::base::CompoundStateManifold), there is an
    automatic projection computed, based on the default projection of
    contained manifolds. This is typically slow to compute and the
    user is encouraged to define appropriate projections, if
    available.

    For more reading on this topic, please see:
        È˜ucan, Ioan A., Kavraki Lydia E., On the Performance of Random Linear Projections for Sampling-Based Motion Planning, in <em>IEEE/RSJ International Conference on Intelligent Robots and Systems</em>, pp. 2434-2439, Oct 2009. DOI: <a href="http://dx.doi.org/10.1109/IROS.2009.5354403">http://dx.doi.org/10.1109/IROS.2009.5354403</a>.

*/
